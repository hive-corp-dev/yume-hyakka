---
import { getCollection } from 'astro:content';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import Container from '../../../components/Container.astro';
import ArticleList from '@components/Article/ArticleList.astro';
import Breadcrumb from '@components/Breadcrumb.astro';
import {tagPaths, getTagDataBySlug} from '../../../utils/articleTags';
import { KEYWORD_SINGLE_METADATA } from '@data/metadata';
import { getSortedPosts } from '@utils/article';

export async function getStaticPaths() {
  const articleEntries = await getCollection('article', ({data}) => {
    return data.isDraft === false;
  });

  const paths = tagPaths
    .map((tag) => {
      // タグに関連する記事をフィルタリング
      const filteredPosts = articleEntries.filter((post) =>
        post.data.tags?.includes(tag.params.keyword)
      );

      // 関連する記事がない場合は null を返す
      if (filteredPosts.length === 0) {
        return null;
      }

      // 関連する記事がある場合は有効な path を生成
      return {
        ...tag,
        props: { posts: filteredPosts }, // フィルタリング済みの記事を props として渡す
      };
    })
    .filter(Boolean); // null を除去
    return paths;
  }

const {keyword} = Astro.params;
const {posts} = Astro.props;

const sortedArticles = getSortedPosts(posts);

---

<BaseLayout title={`${getTagDataBySlug(keyword).label} | ${KEYWORD_SINGLE_METADATA.title}`} description={`キーワード: ${getTagDataBySlug(keyword).label}に関する記事一覧です。`}>
  <div class="mv">
    <h1 class="mv__title">
      <span>夢占い</span>
      <span>キーワード：{getTagDataBySlug(keyword).label}</span>
    </h1>
  </div>
  <div class="content">
    <Breadcrumb data={[
      { href: '/', label: 'ホーム' },
      { href: '/article', label: '夢占い' },
      { href: '/article/keyword', label: 'キーワード一覧' },
      { label: getTagDataBySlug(keyword).label },
    ]} />
    <Container>
      <div class="wrap">
        <main class="main">
          <ArticleList articles={sortedArticles} />
        </main>
      </div>
    </Container>
  </div>
</BaseLayout>

<style lang="scss">

.mv{
  padding: 20rem 0 12rem;
  display: flex;
  align-items: center;
  justify-content: center;

  @include mixin.sp {
    padding: 16rem 0 9rem;
  }

  &__title {
    font-size: 3.2rem;
    font-weight: bold;
    color: white;
    letter-spacing: .1em;

    span {
      display: block;

      &:nth-child(1) {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        gap: 1.6rem;

        @include mixin.sp {
          font-size: 2.4rem;
        }
      }

      &:nth-child(2) {
        font-size: 2.4rem;
        margin-top: 1.6rem;

        @include mixin.sp {
          font-size: 2rem;
          margin-top: .8rem;
        }
      }
    }
  }
}

  .wrap {
  position: relative;
  display: flex;
  gap: 4.8rem;
  padding: 8rem 0 20rem;
  z-index: 1;

  @include mixin.sp {
    padding: 8rem 0;
  }
}

.content {
  position: relative;
  width: 100%;
  background: #fff;

  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    		background-image: var(--bgImg);
    background-size: 100% auto;
    background-repeat: repeat-y;
    opacity: 0.2;
    pointer-events: none;

    @include mixin.sp {
						background-image: var(--bgImgSp);
		}
  }
}

.section {
  position: relative;
  padding-top: 12rem;
  z-index: 1;

  @include mixin.sp {
    padding-top: 8rem;
  }
}

.main {
  flex-grow: 1;
  padding-left: 2.4rem;
  padding-right: 2.4rem;
  width: 100%;

  @include mixin.sp {
    padding-left: 0;
    padding-right: 0;
  }
}

.title {
  position: relative;
  font-size: 3.2rem;
  font-weight: bold;
  letter-spacing: .1em;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 1.6rem;
  padding-bottom: 2rem;

  @include mixin.sp {
    font-size: 2.2rem;
    padding-bottom: 1.6rem;
  }

  &::after {
    content: '';
    width: 4rem;
    height: .2rem;
  background-image: linear-gradient(to right ,var.$c-key-1, var.$c-key-2);
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  margin: 0 auto;

  @include mixin.sp {
    width: 2.4rem;
  }
}

  span {
  // 	background-image: linear-gradient(to right ,var.$c-key-1, var.$c-key-2);
  // color: transparent;
  // background-clip: text;
  }
}

.article {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 6.4rem 4rem;
  margin-top: 4.8rem;

  @include mixin.sp {
    gap: 1.6rem;
    margin-top: 2.4rem;
  }

  @include mixin.sp-s {
    grid-template-columns: 1fr;
    gap: 2.4rem;
  }

  &__item {}

  &__link {
    display: flex;
    flex-direction: column;

    @include mixin.hover {
      &:hover {
        .article__thumb img {
          transform: scale(1.06);
        }
      }
    }
  }

  &__thumb {
    position: relative;
    display: flex;
    aspect-ratio:  16 / 9;
    overflow: hidden;

    img {
      height: 100%;
      object-fit: cover;
      transition: all .6s;
    }
  }

  &__title {
    font-size: 1.8rem;
    font-weight: bold;
    margin-top: .8rem;

    @include mixin.sp {
      font-size: 1.4rem;
    }
  }

  &__tag {
    display: flex;
    flex-wrap: wrap;
    gap: .8rem;
    margin-top: .8rem;

    @include mixin.sp {
      gap: .4rem;
    }
  }

  &__tag-item {
    display: flex;
    font-size: 1.4rem;
    font-weight: 600;
    border: .1rem solid rgba(0,0,0, .2);
    padding: .2rem 1.2rem .3rem;
    border-radius: .3rem;

    @include mixin.sp {
      font-size: 1rem;
      padding: .1rem .4rem .2rem;
    }

    &::before {
      content: '#';
      margin-right: .2rem;

      @include mixin.sp {
        margin-right: 0;
      }
    }
  }
}

</style>